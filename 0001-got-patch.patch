From 1aaf7816aaf333326835e0674b70080254bf5d2d Mon Sep 17 00:00:00 2001
From: delancao <delancao@gmail.com>
Date: Wed, 10 Aug 2016 13:12:58 +0200
Subject: [PATCH] got patch

---
 Board/things_module2/LoRaWAN/LoRaMac.c       | 333 +++++++++++++++++------
 Board/things_module2/LoRaWAN/LoRaMac.h       |  35 ++-
 Board/things_module2/LoRaWAN/LoRaMacCrypto.c |   3 +-
 Board/things_module2/LoRaWAN/cmac.c          |   2 +-
 Board/things_module2/LoRaWAN/cmac.h          |  26 +-
 Board/things_module2/LoRaWAN/main.c          | 389 ++++++++++++++++++++-------
 6 files changed, 596 insertions(+), 192 deletions(-)

diff --git a/Board/things_module2/LoRaWAN/LoRaMac.c b/Board/things_module2/LoRaWAN/LoRaMac.c
index 40bbcd2..15eaf21 100644
--- a/Board/things_module2/LoRaWAN/LoRaMac.c
+++ b/Board/things_module2/LoRaWAN/LoRaMac.c
@@ -17,11 +17,90 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 
 Maintainer: Miguel Luis ( Semtech ), Gregory Cristian ( Semtech ) and Daniel JÃ¤ckle ( STACKFORCE )
 */
-#include "board.h"
+#include "boards.h"
 
+#include "sx1276Regs-LoRa.h"
+#include "radio.h"
 #include "LoRaMacCrypto.h"
 #include "LoRaMac.h"
 #include "LoRaMacTest.h"
+#include "app_error.h"
+#include "app_timer.h"
+#include "app_scheduler.h"
+#include "SEGGER_RTT.h"
+#include "sx1276.h"
+
+#include "main.h"
+#include "lora_val.h"
+
+
+#define RADIO_WAKEUP_TIME                           1000 // [us]
+
+/*!
+ * \brief Returns the minimum value betwen a and b
+ *
+ * \param [IN] a 1st value
+ * \param [IN] b 2nd value
+ * \retval minValue Minimum value
+ */
+#define MIN( a, b ) ( ( ( a ) < ( b ) ) ? ( a ) : ( b ) )
+
+/*!
+ * \brief Returns the maximum value betwen a and b
+ *
+ * \param [IN] a 1st value
+ * \param [IN] b 2nd value
+ * \retval maxValue Maximum value
+ */
+#define MAX( a, b ) ( ( ( a ) > ( b ) ) ? ( a ) : ( b ) )
+
+
+#define RAND_LOCAL_MAX 2147483647L
+
+static uint32_t next = 1;
+
+static int32_t rand1( void )
+{
+    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
+}
+
+static void srand1( uint32_t seed )
+{
+    next = seed;
+}
+// Standard random functions redefinition end
+
+static int32_t randr( int32_t min, int32_t max )
+{
+    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
+}
+
+
+
+static void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
+{
+    dst = dst + ( size - 1 );
+    while( size-- )
+    {
+        *dst-- = *src++;
+    }
+}
+
+static void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
+{
+    while( size-- )
+    {
+        *dst++ = *src++;
+    }
+}
+
+static void memset1( uint8_t *dst, uint8_t value, uint16_t size )
+{
+    while( size-- )
+    {
+        *dst++ = value;
+    }
+}
 
 /*!
  * Maximum PHY layer payload size
@@ -452,7 +531,7 @@ uint32_t LoRaMacState = MAC_IDLE;
 /*!
  * LoRaMac timer used to check the LoRaMacState (runs every second)
  */
-static TimerEvent_t MacStateCheckTimer;
+//static TimerEvent_t MacStateCheckTimer;
 
 /*!
  * LoRaMac upper layer event functions
@@ -467,18 +546,18 @@ static LoRaMacCallback_t *LoRaMacCallbacks;
 /*!
  * Radio events function pointer
  */
-static RadioEvents_t RadioEvents;
+//static RadioEvents_t RadioEvents;
 
 /*!
  * LoRaMac duty cycle delayed Tx timer
  */
-static TimerEvent_t TxDelayedTimer;
+//static TimerEvent_t TxDelayedTimer;
 
 /*!
  * LoRaMac reception windows timers
  */
-static TimerEvent_t RxWindowTimer1;
-static TimerEvent_t RxWindowTimer2;
+//static TimerEvent_t RxWindowTimer1;
+//static TimerEvent_t RxWindowTimer2;
 
 /*!
  * LoRaMac reception windows delay from end of Tx
@@ -504,7 +583,7 @@ static uint32_t MaxRxWindow;
 /*!
  * Acknowledge timeout timer. Used for packet retransmissions.
  */
-static TimerEvent_t AckTimeoutTimer;
+//static TimerEvent_t AckTimeoutTimer;
 
 /*!
  * Number of trials to get a frame acknowledged
@@ -585,27 +664,27 @@ static void OnRadioRxTimeout( void );
 /*!
  * \brief Function executed on Resend Frame timer event.
  */
-static void OnMacStateCheckTimerEvent( void );
+void OnMacStateCheckTimerEvent( void *p_context );
 
 /*!
  * \brief Function executed on duty cycle delayed Tx  timer event
  */
-static void OnTxDelayedTimerEvent( void );
+void OnTxDelayedTimerEvent( void *p_context );
 
 /*!
  * \brief Function executed on first Rx window timer event
  */
-static void OnRxWindow1TimerEvent( void );
+void OnRxWindow1TimerEvent( void *p_context );
 
 /*!
  * \brief Function executed on second Rx window timer event
  */
-static void OnRxWindow2TimerEvent( void );
+void OnRxWindow2TimerEvent( void *p_context );
 
 /*!
  * \brief Function executed on AckTimeout timer event
  */
-static void OnAckTimeoutTimerEvent( void );
+void OnAckTimeoutTimerEvent( void *p_context );
 
 /*!
  * \brief Searches and set the next random available channel
@@ -775,18 +854,24 @@ static LoRaMacStatus_t ScheduleTx( void );
  */
 LoRaMacStatus_t SendFrameOnChannel( ChannelParams_t channel );
 
-
+//define the global variables for the time counter instead of using the UTC time
+TimerTime_t currentTime = 0;
 
 static void OnRadioTxDone( void )
 {
-    TimerTime_t curTime = TimerGetCurrentTime( );
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"**OnRadioTxDone**\n");
+#endif
+    TimerTime_t curTime; //= 0;//TimerGetCurrentTime( );
+    curTime = currentTime;
+    currentTime++;
     if( LoRaMacDeviceClass != CLASS_C )
     {
         Radio.Sleep( );
     }
     else
     {
-        OnRxWindow2TimerEvent( );
+        //OnRxWindow2TimerEvent( );
     }
 
     // Update Band Time OFF
@@ -805,18 +890,33 @@ static void OnRadioTxDone( void )
 
     if( IsRxWindowsEnabled == true )
     {
-        TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
-        TimerStart( &RxWindowTimer1 );
+        //TimerSetValue( &RxWindowTimer1, RxWindow1Delay );
+        //TimerStart( &RxWindowTimer1 );
+        RxWindow1Delay = 3000;
+#if DEBUG_info
+        SEGGER_RTT_WriteString(0,"RxWindowTimer1 app_timer_start\n");
+        SEGGER_RTT_printf(0, " RxWindowTimer1 RxWindow1Delay %d \r\n", RxWindow1Delay);
+#endif
+        app_timer_start(RxWindowTimer1,APP_TIMER_TICKS(RxWindow1Delay,0),NULL);
+
         if( LoRaMacDeviceClass != CLASS_C )
         {
-            TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
-            TimerStart( &RxWindowTimer2 );
+            //TimerSetValue( &RxWindowTimer2, RxWindow2Delay );
+            //TimerStart( &RxWindowTimer2 );
+            RxWindow2Delay = 5000;
+#if DEBUG_info
+            SEGGER_RTT_WriteString(0,"RxWindowTimer2 app_timer_start\n");
+            SEGGER_RTT_printf(0, " RxWindowTimer2 RxWindow2Delay %d \r\n", RxWindow2Delay);
+#endif
+            app_timer_start(RxWindowTimer2,APP_TIMER_TICKS(RxWindow2Delay,0),NULL);
         }
         if( ( LoRaMacDeviceClass == CLASS_C ) || ( NodeAckRequested == true ) )
         {
-            TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + ACK_TIMEOUT +
-                                             randr( -ACK_TIMEOUT_RND, ACK_TIMEOUT_RND ) );
-            TimerStart( &AckTimeoutTimer );
+            //TimerSetValue( &AckTimeoutTimer, RxWindow2Delay + ACK_TIMEOUT +
+            //                                 randr( -ACK_TIMEOUT_RND, ACK_TIMEOUT_RND ) );
+            //TimerStart( &AckTimeoutTimer );
+           // SEGGER_RTT_WriteString(0,"AckTimeoutTimer app_timer_start\n");
+           // app_timer_start(AckTimeoutTimer,APP_TIMER_TICKS(RxWindow2Delay + ACK_TIMEOUT + randr( -ACK_TIMEOUT_RND, ACK_TIMEOUT_RND),0),NULL);
         }
     }
     else
@@ -844,24 +944,28 @@ static void PrepareRxDoneAbort( void )
 
     if( NodeAckRequested )
     {
-        OnAckTimeoutTimerEvent( );
+        OnAckTimeoutTimerEvent(r_context );
     }
 
     if( ( RxSlot == 0 ) && ( LoRaMacDeviceClass == CLASS_C ) )
     {
-        OnRxWindow2TimerEvent( );
+       // OnRxWindow2TimerEvent( );
     }
 
     LoRaMacFlags.Bits.McpsInd = 1;
     LoRaMacFlags.Bits.MacDone = 1;
 
     // Trig OnMacCheckTimerEvent call as soon as possible
-    TimerSetValue( &MacStateCheckTimer, 1000 );
-    TimerStart( &MacStateCheckTimer );
+    //TimerSetValue( &MacStateCheckTimer, 1000 );
+    //TimerStart( &MacStateCheckTimer );
+    app_timer_start(MacStateCheckTimer,APP_TIMER_TICKS(1000,0),NULL);
 }
 
 static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
 {
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"**OnRadioRxDone**\n");
+#endif
     LoRaMacHeader_t macHdr;
     LoRaMacFrameCtrl_t fCtrl;
 
@@ -904,7 +1008,8 @@ static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t
     {
         Radio.Sleep( );
     }
-    TimerStop( &RxWindowTimer2 );
+    //TimerStop( &RxWindowTimer2 );
+    app_timer_stop( RxWindowTimer2 );
 
     macHdr.Value = payload[pktHeaderLen++];
 
@@ -1120,7 +1225,8 @@ static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t
 
                         // Stop the AckTimeout timer as no more retransmissions
                         // are needed.
-                        TimerStop( &AckTimeoutTimer );
+                        //TimerStop( &AckTimeoutTimer );
+                        app_timer_stop( AckTimeoutTimer );
                     }
                     else
                     {
@@ -1130,7 +1236,8 @@ static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t
                         {
                             // Stop the AckTimeout timer as no more retransmissions
                             // are needed.
-                            TimerStop( &AckTimeoutTimer );
+                            //TimerStop( &AckTimeoutTimer );
+                            app_timer_stop( AckTimeoutTimer );
                         }
                     }
 
@@ -1205,13 +1312,14 @@ static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t
 
     if( ( RxSlot == 0 ) && ( LoRaMacDeviceClass == CLASS_C ) )
     {
-        OnRxWindow2TimerEvent( );
+        //OnRxWindow2TimerEvent( );
     }
     LoRaMacFlags.Bits.MacDone = 1;
 
     // Trig OnMacCheckTimerEvent call as soon as possible
-    TimerSetValue( &MacStateCheckTimer, 1000 );
-    TimerStart( &MacStateCheckTimer );
+    //TimerSetValue( &MacStateCheckTimer, 1000 );
+    //TimerStart( &MacStateCheckTimer );
+    app_timer_start(MacStateCheckTimer,APP_TIMER_TICKS(1000,0),NULL);
 }
 
 static void OnRadioTxTimeout( void )
@@ -1222,9 +1330,12 @@ static void OnRadioTxTimeout( void )
     }
     else
     {
-        OnRxWindow2TimerEvent( );
+       // OnRxWindow2TimerEvent( );
     }
 
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"OnRadioTxTimeout LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT\n");
+#endif
     McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
     MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
     LoRaMacFlags.Bits.MacDone = 1;
@@ -1238,7 +1349,7 @@ static void OnRadioRxError( void )
     }
     else
     {
-        OnRxWindow2TimerEvent( );
+       // OnRxWindow2TimerEvent( );
     }
 
     if( RxSlot == 1 )
@@ -1251,7 +1362,7 @@ static void OnRadioRxError( void )
         LoRaMacFlags.Bits.MacDone = 1;
     }
 }
-int tt = 0;
+
 static void OnRadioRxTimeout( void )
 {
     if( LoRaMacDeviceClass != CLASS_C )
@@ -1260,11 +1371,16 @@ static void OnRadioRxTimeout( void )
     }
     else
     {
-        OnRxWindow2TimerEvent( );
+       // OnRxWindow2TimerEvent( );
     }
-		tt = RxSlot;
+#if DEBUG_info
+    SEGGER_RTT_printf(0, " RxSlot %d \r\n", RxSlot );
+#endif
     if( RxSlot == 1 )
     {
+#if DEBUG_info
+        SEGGER_RTT_printf(0, " NodeAckRequested %d \r\n", NodeAckRequested );
+#endif
         if( NodeAckRequested == true )
         {
             McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
@@ -1272,17 +1388,29 @@ static void OnRadioRxTimeout( void )
         MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT;
         LoRaMacFlags.Bits.MacDone = 1;
     }
+
+
 }
 
-static void OnMacStateCheckTimerEvent( void )
+void OnMacStateCheckTimerEvent( void *p_context )
 {
-    TimerStop( &MacStateCheckTimer );
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"-----OnMacStateCheckTimerEvent-----\n");
+#endif
+    //TimerStop( &MacStateCheckTimer );
+    app_timer_stop( MacStateCheckTimer );
     bool txTimeout = false;
 
+#if DEBUG_info
+    SEGGER_RTT_printf(0, " LoRaMacFlags.Bits.MacDone %d \r\n", LoRaMacFlags.Bits.MacDone );
+#endif
     if( LoRaMacFlags.Bits.MacDone == 1 )
     {
         if( ( LoRaMacFlags.Bits.MlmeReq == 1 ) || ( ( LoRaMacFlags.Bits.McpsReq == 1 ) ) )
         {
+#if DEBUG_info
+            SEGGER_RTT_printf(0, " McpsConfirm.Status %d \r\n", McpsConfirm.Status );
+#endif
             if( ( McpsConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) ||
                 ( MlmeConfirm.Status == LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT ) )
             {
@@ -1404,6 +1532,9 @@ static void OnMacStateCheckTimerEvent( void )
     {
         LoRaMacState &= ~MAC_RX;
     }
+#if DEBUG_info
+    SEGGER_RTT_printf(0, " LoRaMacState %d \r\n", LoRaMacState );
+#endif
     if( LoRaMacState == MAC_IDLE )
     {
         if( LoRaMacFlags.Bits.McpsReq == 1 )
@@ -1423,10 +1554,17 @@ static void OnMacStateCheckTimerEvent( void )
     else
     {
         // Operation not finished restart timer
-        TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
-        TimerStart( &MacStateCheckTimer );
+        //TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
+        //TimerStart( &MacStateCheckTimer );
+#if DEBUG_info
+        SEGGER_RTT_WriteString(0,"OnMacStateCheckTimerEvent start again\n");
+#endif
+        app_timer_start(MacStateCheckTimer,APP_TIMER_TICKS(2000,0),NULL);
     }
 
+#if DEBUG_info
+    SEGGER_RTT_printf(0, " LoRaMacFlags.Bits.McpsInd %d \r\n", LoRaMacFlags.Bits.McpsInd );
+#endif
     if( LoRaMacFlags.Bits.McpsInd == 1 )
     {
         LoRaMacPrimitives->MacMcpsIndication( &McpsIndication );
@@ -1434,21 +1572,28 @@ static void OnMacStateCheckTimerEvent( void )
     }
 }
 
-static void OnTxDelayedTimerEvent( void )
+void OnTxDelayedTimerEvent( void *p_context )
 {
-    TimerStop( &TxDelayedTimer );
+    //TimerStop( &TxDelayedTimer );
+    app_timer_stop( TxDelayedTimer );
     LoRaMacState &= ~MAC_TX_DELAYED;
 
     ScheduleTx( );
 }
 
-static void OnRxWindow1TimerEvent( void )
+void OnRxWindow1TimerEvent( void *p_context )
 {
+    //set the spi irq priority as high when rx setting
+    NVIC_SetPriority(SPI0_TWI0_IRQn,1);
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"--------OnRxWindow1TimerEvent---------\n");
+#endif
     uint16_t symbTimeout = 5; // DR_2, DR_1, DR_0
     int8_t datarate = 0;
     uint32_t bandwidth = 0; // LoRa 125 kHz
 
-    TimerStop( &RxWindowTimer1 );
+    //TimerStop( &RxWindowTimer1 );
+    app_timer_stop( RxWindowTimer1 );
     RxSlot = 0;
 
     if( LoRaMacDeviceClass == CLASS_C )
@@ -1492,14 +1637,22 @@ static void OnRxWindow1TimerEvent( void )
 #else
     #error "Please define a frequency band in the compiler options."
 #endif
+    //set spi irq priority as low after rx setting
+   NVIC_SetPriority(SPI0_TWI0_IRQn,3); 
 }
 
-static void OnRxWindow2TimerEvent( void )
+void OnRxWindow2TimerEvent( void *p_context )
 {
+    //set the spi irq priority as high when rx setting
+    NVIC_SetPriority(SPI0_TWI0_IRQn,1);
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"--------OnRxWindow2TimerEvent---------\n");
+#endif
     uint16_t symbTimeout = 5; // DR_2, DR_1, DR_0
     uint32_t bandwidth = 0; // LoRa 125 kHz
 
-    TimerStop( &RxWindowTimer2 );
+    //TimerStop( &RxWindowTimer2 );
+     app_timer_stop( RxWindowTimer2 );
     RxSlot = 1;
 
 #if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
@@ -1525,6 +1678,9 @@ static void OnRxWindow2TimerEvent( void )
 #else
     #error "Please define a frequency band in the compiler options."
 #endif
+#if DEBUG_info
+    SEGGER_RTT_printf(0, " RxWindowTimer2 Rx2Channel.Frequency %d Rx2Channel.Datarate %d\r\n", Rx2Channel.Frequency,Rx2Channel.Datarate);
+#endif
     if( LoRaMacDeviceClass != CLASS_C )
     {
         RxWindowSetup( Rx2Channel.Frequency, Rx2Channel.Datarate, bandwidth, symbTimeout, false );
@@ -1533,12 +1689,16 @@ static void OnRxWindow2TimerEvent( void )
     {
         RxWindowSetup( Rx2Channel.Frequency, Rx2Channel.Datarate, bandwidth, symbTimeout, true );
     }
+    //set spi irq priority as low after rx setting
+    NVIC_SetPriority(SPI0_TWI0_IRQn,3);
+    
 }
 
-static void OnAckTimeoutTimerEvent( void )
+void OnAckTimeoutTimerEvent( void *p_context )
 {
-    TimerStop( &AckTimeoutTimer );
+    //TimerStop( &AckTimeoutTimer );
 
+    app_timer_stop( AckTimeoutTimer );
     if( NodeAckRequested == true )
     {
         AckTimeoutRetry = true;
@@ -1555,7 +1715,9 @@ static bool SetNextChannel( TimerTime_t* time )
     uint8_t nbEnabledChannels = 0;
     uint8_t delayTx = 0;
     uint8_t enabledChannels[LORA_MAX_NB_CHANNELS];
-    TimerTime_t curTime = TimerGetCurrentTime( );
+    TimerTime_t curTime;
+    curTime = currentTime;//1000;//TimerGetCurrentTime( );
+    currentTime++;
     TimerTime_t nextTxDelay = ( TimerTime_t )( -1 );
 
     memset1( enabledChannels, 0, LORA_MAX_NB_CHANNELS );
@@ -1699,7 +1861,7 @@ static void RxWindowSetup( uint32_t freq, int8_t datarate, uint32_t bandwidth, u
 
     if( Radio.GetStatus( ) == RF_IDLE )
     {
-        Radio.SetChannel( 869525000 );
+        Radio.SetChannel( freq );
 
         // Store downlink datarate
         McpsIndication.RxDatarate = ( uint8_t ) datarate;
@@ -1714,7 +1876,7 @@ static void RxWindowSetup( uint32_t freq, int8_t datarate, uint32_t bandwidth, u
         {
             modem = MODEM_LORA;
             //Radio.SetRxConfig( modem, bandwidth, downlinkDatarate, 1, 0, 8, timeout, false, 0, false, 0, 0, true, rxContinuous );
-					  Radio.SetRxConfig( modem, bandwidth, 9, 1, 0, 8, timeout, false, 0, false, 0, 0, true, rxContinuous );
+                     Radio.SetRxConfig( modem, bandwidth, 9, 1, 0, 8, timeout, false, 0, false, 0, 0, true, rxContinuous );
         }
 #elif defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )
         modem = MODEM_LORA;
@@ -2370,9 +2532,9 @@ static LoRaMacStatus_t ScheduleTx( )
         ChannelsMask[0] = ChannelsMask[0] | ( LC( 1 ) + LC( 2 ) + LC( 3 ) );
 #endif
     }
-		//Hack to send frame always ... Used for Testing
+        //Hack to send frame always ... Used for Testing
         //TODO: Enable_debug mode
-		return SendFrameOnChannel( Channels[Channel] );
+        return SendFrameOnChannel( Channels[Channel] );
     // Schedule transmission of frame
     if( dutyCycleTimeOff == 0 )
     {
@@ -2383,8 +2545,9 @@ static LoRaMacStatus_t ScheduleTx( )
     {
         // Send later - prepare timer
         LoRaMacState |= MAC_TX_DELAYED;
-        TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff ); //600000000
-        TimerStart( &TxDelayedTimer );
+        //TimerSetValue( &TxDelayedTimer, dutyCycleTimeOff ); //600000000
+        //TimerStart( &TxDelayedTimer );
+        app_timer_start(TxDelayedTimer,APP_TIMER_TICKS(dutyCycleTimeOff,0),NULL);
 
         return LORAMAC_STATUS_OK;
     }
@@ -2550,7 +2713,7 @@ LoRaMacStatus_t SendFrameOnChannel( ChannelParams_t channel )
     McpsConfirm.Datarate = ChannelsDatarate;
     McpsConfirm.TxPower = ChannelsTxPower;
 
-    Radio.SetChannel( 868100000 );
+    Radio.SetChannel( channel.Frequency );
 
 #if defined( USE_BAND_433 ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )
     if( ChannelsDatarate == DR_7 )
@@ -2593,8 +2756,9 @@ LoRaMacStatus_t SendFrameOnChannel( ChannelParams_t channel )
     MlmeConfirm.TxTimeOnAir = TxTimeOnAir;
 
     // Starts the MAC layer status check timer
-    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
-    TimerStart( &MacStateCheckTimer );
+    //TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
+    //TimerStart( &MacStateCheckTimer );
+    app_timer_start(MacStateCheckTimer,APP_TIMER_TICKS(1000,0),NULL);
 
     // Send now
     Radio.Send( LoRaMacBuffer, LoRaMacBufferPktLen );
@@ -2706,14 +2870,7 @@ LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacC
     ReceiveDelay2 = RECEIVE_DELAY2;
     JoinAcceptDelay1 = JOIN_ACCEPT_DELAY1;
     JoinAcceptDelay2 = JOIN_ACCEPT_DELAY2;
-
-    TimerInit( &MacStateCheckTimer, OnMacStateCheckTimerEvent );
-    TimerSetValue( &MacStateCheckTimer, MAC_STATE_CHECK_TIMEOUT );
-
-    TimerInit( &TxDelayedTimer, OnTxDelayedTimerEvent );
-    TimerInit( &RxWindowTimer1, OnRxWindow1TimerEvent );
-    TimerInit( &RxWindowTimer2, OnRxWindow2TimerEvent );
-    TimerInit( &AckTimeoutTimer, OnAckTimeoutTimerEvent );
+ 
 
     // Initialize Radio driver
     RadioEvents.TxDone = OnRadioTxDone;
@@ -2721,7 +2878,7 @@ LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t *primitives, LoRaMacC
     RadioEvents.RxError = OnRadioRxError;
     RadioEvents.TxTimeout = OnRadioTxTimeout;
     RadioEvents.RxTimeout = OnRadioRxTimeout;
-    Radio.Init( &RadioEvents );
+    Radio.Init(  );
 
     // Random seed initialization
     srand1( Radio.Random( ) );
@@ -2946,7 +3103,7 @@ LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t *mibSet )
                 {
                     // Set the NodeAckRequested indicator to default
                     NodeAckRequested = false;
-                    OnRxWindow2TimerEvent( );
+                   // OnRxWindow2TimerEvent( );
                     break;
                 }
             }
@@ -3434,7 +3591,7 @@ LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest )
     return status;
 }
 
-LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
+LoRaMacStatus_t LoRaMacMcpsRequest()
 {
     LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
     LoRaMacHeader_t macHdr;
@@ -3444,21 +3601,21 @@ LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
     int8_t datarate;
     bool readyToSend = false;
 
-    if( mcpsRequest == NULL )
+    /*if( mcpsRequest == NULL )
     {
         return LORAMAC_STATUS_PARAMETER_INVALID;
-    }
-    if( ( ( LoRaMacState & MAC_TX_RUNNING ) == MAC_TX_RUNNING ) ||
+    }*/
+    /*if( ( ( LoRaMacState & MAC_TX_RUNNING ) == MAC_TX_RUNNING ) ||
         ( ( LoRaMacState & MAC_TX_DELAYED ) == MAC_TX_DELAYED ) )
     {
         return LORAMAC_STATUS_BUSY;
-    }
+    }*/
 
     macHdr.Value = 0;
     memset1 ( ( uint8_t* ) &McpsConfirm, 0, sizeof( McpsConfirm ) );
     McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 
-    switch( mcpsRequest->Type )
+    switch( mcpsRequest.Type )
     {
         case MCPS_UNCONFIRMED:
         {
@@ -3466,23 +3623,23 @@ LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
             AckTimeoutRetries = 1;
 
             macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
-            fPort = mcpsRequest->Req.Unconfirmed.fPort;
-            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
-            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
-            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
+            fPort = mcpsRequest.Req.Unconfirmed.fPort;
+            fBuffer = mcpsRequest.Req.Unconfirmed.fBuffer;
+            fBufferSize = mcpsRequest.Req.Unconfirmed.fBufferSize;
+            datarate = mcpsRequest.Req.Unconfirmed.Datarate;
             break;
         }
         case MCPS_CONFIRMED:
         {
             readyToSend = true;
             AckTimeoutRetriesCounter = 1;
-            AckTimeoutRetries = mcpsRequest->Req.Confirmed.NbTrials;
+            AckTimeoutRetries = mcpsRequest.Req.Confirmed.NbTrials;
 
             macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
-            fPort = mcpsRequest->Req.Confirmed.fPort;
-            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
-            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
-            datarate = mcpsRequest->Req.Confirmed.Datarate;
+            fPort = mcpsRequest.Req.Confirmed.fPort;
+            fBuffer = mcpsRequest.Req.Confirmed.fBuffer;
+            fBufferSize = mcpsRequest.Req.Confirmed.fBufferSize;
+            datarate = mcpsRequest.Req.Confirmed.Datarate;
             break;
         }
         case MCPS_PROPRIETARY:
@@ -3491,9 +3648,9 @@ LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
             AckTimeoutRetries = 1;
 
             macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
-            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
-            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
-            datarate = mcpsRequest->Req.Proprietary.Datarate;
+            fBuffer = mcpsRequest.Req.Proprietary.fBuffer;
+            fBufferSize = mcpsRequest.Req.Proprietary.fBufferSize;
+            datarate = mcpsRequest.Req.Proprietary.Datarate;
             break;
         }
         default:
@@ -3517,7 +3674,7 @@ LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest )
         status = Send( &macHdr, fPort, fBuffer, fBufferSize );
         if( status == LORAMAC_STATUS_OK )
         {
-            McpsConfirm.McpsRequest = mcpsRequest->Type;
+            McpsConfirm.McpsRequest = mcpsRequest.Type;
             LoRaMacFlags.Bits.McpsReq = 1;
         }
         else
diff --git a/Board/things_module2/LoRaWAN/LoRaMac.h b/Board/things_module2/LoRaWAN/LoRaMac.h
index 312d5eb..19204bf 100755
--- a/Board/things_module2/LoRaWAN/LoRaMac.h
+++ b/Board/things_module2/LoRaWAN/LoRaMac.h
@@ -48,6 +48,13 @@
 
 // Includes board dependent definitions such as channels frequencies
 #include "LoRaMac-board.h"
+#include <string.h>
+#include <stdbool.h>
+#include "inttypes.h"
+#include "app_util_platform.h"
+#include "app_error.h"
+
+ typedef uint64_t TimerTime_t;
 
 /*!
  * Beacon interval in us
@@ -1673,7 +1680,33 @@ LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t *mlmeRequest );
  *          \ref LORAMAC_STATUS_LENGTH_ERROR,
  *          \ref LORAMAC_STATUS_DEVICE_OFF.
  */
-LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t *mcpsRequest );
+LoRaMacStatus_t LoRaMacMcpsRequest( );
+
+
+/*!
+ * \brief Function executed on Resend Frame timer event.
+ */
+extern void OnMacStateCheckTimerEvent( void *p_context );
+
+/*!
+ * \brief Function executed on duty cycle delayed Tx  timer event
+ */
+extern void OnTxDelayedTimerEvent( void *p_context );
+
+/*!
+ * \brief Function executed on first Rx window timer event
+ */
+extern void OnRxWindow1TimerEvent( void *p_context );
+
+/*!
+ * \brief Function executed on second Rx window timer event
+ */
+extern void OnRxWindow2TimerEvent( void *p_context );
+
+/*!
+ * \brief Function executed on AckTimeout timer event
+ */
+extern void OnAckTimeoutTimerEvent( void *p_context );
 
 /*! \} defgroup LORAMAC */
 
diff --git a/Board/things_module2/LoRaWAN/LoRaMacCrypto.c b/Board/things_module2/LoRaWAN/LoRaMacCrypto.c
index d9e3d61..861e3ab 100755
--- a/Board/things_module2/LoRaWAN/LoRaMacCrypto.c
+++ b/Board/things_module2/LoRaWAN/LoRaMacCrypto.c
@@ -19,12 +19,13 @@ Maintainer: Miguel Luis ( Semtech ), Gregory Cristian ( Semtech ) and Daniel JÃ¤
 */
 #include <stdlib.h>
 #include <stdint.h>
-#include "utilities.h"
+//#include "utilities.h"
 
 #include "aes.h"
 #include "cmac.h"
 
 #include "LoRaMacCrypto.h"
+#include "SEGGER_RTT.h"
 
 /*!
  * CMAC/AES Message Integrity Code (MIC) Block B0 size
diff --git a/Board/things_module2/LoRaWAN/cmac.c b/Board/things_module2/LoRaWAN/cmac.c
index 779b668..57ff49e 100644
--- a/Board/things_module2/LoRaWAN/cmac.c
+++ b/Board/things_module2/LoRaWAN/cmac.c
@@ -37,7 +37,7 @@ DEALINGS WITH THE SOFTWARE
 #include <stdint.h>
 #include "aes.h"
 #include "cmac.h"
-#include "utilities.h"
+//#include "utilities.h"
 
 #define LSHIFT(v, r) do {                                       \
   int32_t i;                                                  \
diff --git a/Board/things_module2/LoRaWAN/cmac.h b/Board/things_module2/LoRaWAN/cmac.h
index c12e970..a35487e 100644
--- a/Board/things_module2/LoRaWAN/cmac.h
+++ b/Board/things_module2/LoRaWAN/cmac.h
@@ -37,7 +37,31 @@ DEALINGS WITH THE SOFTWARE
 #define _CMAC_H_
 
 #include "aes.h" 
-  
+
+ /*!
+ * \brief Returns the minimum value betwen a and b
+ *
+ * \param [IN] a 1st value
+ * \param [IN] b 2nd value
+ * \retval minValue Minimum value
+ */
+#define MIN( a, b ) ( ( ( a ) < ( b ) ) ? ( a ) : ( b ) )
+
+static void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
+{
+    while( size-- )
+    {
+        *dst++ = *src++;
+    }
+}
+
+static void memset1( uint8_t *dst, uint8_t value, uint16_t size )
+{
+    while( size-- )
+    {
+        *dst++ = value;
+    }
+}
 #define AES_CMAC_KEY_LENGTH     16
 #define AES_CMAC_DIGEST_LENGTH  16
  
diff --git a/Board/things_module2/LoRaWAN/main.c b/Board/things_module2/LoRaWAN/main.c
index 70cecbe..4ddfc11 100755
--- a/Board/things_module2/LoRaWAN/main.c
+++ b/Board/things_module2/LoRaWAN/main.c
@@ -14,11 +14,30 @@ Maintainer: Miguel Luis and Gregory Cristian
 */
 #include <string.h>
 #include <math.h>
-#include "board.h"
-
 #include "LoRaMac.h"
+#include "radio.h"
+#include "sx1276.h"
 #include "Comissioning.h"
 
+#include "app_error.h"
+#include "app_timer.h"
+#include "app_scheduler.h"
+#include "nrf_delay.h"
+#include "boards.h"
+#include "SEGGER_RTT.h"
+
+
+#include "main.h"
+#include "lora_val.h" 
+
+#define led0   25
+#define led1   26
+#define led2   27
+#define ledstart led0
+#define ledstop  led1
+
+#define DEBUG_info                                  1 // print debug information via SEGGER_RTT when 1
+
 /*!
  * Join requests trials duty cycle.
  */
@@ -150,7 +169,7 @@ static uint32_t TxDutyCycleTime;
 /*!
  * Timer to handle the application data transmission duty cycle
  */
-static TimerEvent_t TxNextPacketTimer;
+//static TimerEvent_t TxNextPacketTimer;
 
 /*!
  * Specifies the state of the application LED
@@ -160,17 +179,17 @@ static bool AppLedStateOn = false;
 /*!
  * Timer to handle the state of LED1
  */
-static TimerEvent_t Led1Timer;
+//static TimerEvent_t Led1Timer;
 
 /*!
  * Timer to handle the state of LED2
  */
-static TimerEvent_t Led2Timer;
+//static TimerEvent_t Led2Timer;
 
 /*!
  * Timer to handle the state of LED4
  */
-static TimerEvent_t Led4Timer;
+//static TimerEvent_t Led4Timer;
 
 /*!
  * Indicates if a new packet can be sent
@@ -207,11 +226,140 @@ struct ComplianceTest_s
     uint8_t NbGateways;
 }ComplianceTest;
 
+
+/***********************************************AIRFY*******************************************************************************/
+#define RAND_LOCAL_MAX 2147483647L
+
+static uint32_t next = 1;
+
+static int32_t rand1( void )
+{
+    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
+}
+
+static int32_t randr( int32_t min, int32_t max )
+{
+    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
+}
+
+/**@brief Function for error handling, which is called when an error has occurred. 
+ *
+ * @param[in] error_code  Error code supplied to the handler.
+ * @param[in] line_num    Line number where the handler is called.
+ * @param[in] p_file_name Pointer to the file name. 
+ */
+void app_error_handler(uint32_t error_code, uint32_t line_num, const uint8_t * p_file_name)
+{
+    //Set LED2 high to indicate that error has occurred.
+    nrf_gpio_pin_toggle(led2);
+#if DEBUG_info
+    SEGGER_RTT_printf(0,"Died at %d line with error code %d in file %s\n",line_num,error_code,p_file_name);
+#endif
+    /*for (;;)
+    {
+        //No implementation needed.
+    }*/
+}
+
+
+volatile uint8_t HasLoopedThroughMain = 0;
+
+/**@brief Function for wakeup function, callen when device state is DEVICE_STATE_SLEEP
+ *
+ * @param[in] none
+ */
+void TimerWakeUpHandler( void )
+{
+    if( HasLoopedThroughMain < 5 )
+        {
+            HasLoopedThroughMain++;
+        }
+        else
+        { 
+            nrf_delay_ms(1000);
+        }
+    //
+}
+
+/** Starting the internal LFCLK RC oscillator.
+ */
+static void lfclk_config(void)
+{
+    NRF_CLOCK->LFCLKSRC            = (CLOCK_LFCLKSRC_SRC_RC << CLOCK_LFCLKSRC_SRC_Pos);
+    NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
+    NRF_CLOCK->TASKS_LFCLKSTART    = 1;
+    while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0)
+    {
+        //Do nothing.
+    }
+    NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
+   // SEGGER_RTT_WriteString(0,"Started LFCLK RC oscillator!\n");
+}
+
+/*************************************SI7006**********************************************************************************************/
+#include "twi_master.h"
+
+char print_buff[10] ;
+#define SI7006_ADDRESS             0x80    //SI7006 7 bit base address is 0x40, set LSB to 1 for read, 0 for write
+const uint8_t command_read_hum =   0xE5;   //Measure Relative Humidity, Hold Master Mode
+const uint8_t command_read_temp =  0xE3;   //Measure Temperature, Hold Master Mode
+
+
+/**@brief: SI7006 sensor read funtion, reading the SI7006 sensor data base on I2C
+*
+*  param[i]: data_in_celcius: interger part of the detected sensor data
+*  param[i]: data_fraction:   fraction part of the detected sensor data
+*  param[i]: command_read:    I2C commond transfered to the device address
+*  @retval true     Data Readed successful.
+*/
+bool SI7006_read(uint8_t * data_in_celcius, uint8_t * data_fraction, uint8_t command_read)
+{
+    bool transfer_succeeded = false;
+
+    // Write: Begin read sensor command
+    if (twi_master_transfer(SI7006_ADDRESS , (uint8_t *)&command_read, 1, TWI_DONT_ISSUE_STOP))
+    {   
+        uint8_t data_buffer[2];
+
+        // Read: 2 sensor bytes to data_buffer
+        if (twi_master_transfer(SI7006_ADDRESS | TWI_READ_BIT , data_buffer, 2, TWI_ISSUE_STOP))
+        {
+            *data_in_celcius = (int8_t)data_buffer[0];
+            *data_fraction   = (int8_t)data_buffer[1];
+
+            transfer_succeeded = true;
+        }
+    }
+
+    return transfer_succeeded;
+}
+/******************************************************************************************************************************/
+
+
 /*!
  * \brief   Prepares the payload of the frame
  */
 static void PrepareTxFrame( uint8_t port )
 {
+    uint8_t si_temp;
+    uint8_t si_temp_fraction;
+    float si_temperature=0;
+
+    //read temperature if available
+    if (SI7006_read(&si_temp, &si_temp_fraction,command_read_temp))
+    {
+        si_temperature = (float)((((si_temp * 256 + si_temp_fraction) * 175.72) / 65536.0) - 46.85);
+
+#if DEBUG_info
+        sprintf(print_buff, "temperature: %f\n\r", si_temperature);
+        SEGGER_RTT_WriteString(0,print_buff);
+#endif
+    }else{
+#if DEBUG_info
+        SEGGER_RTT_WriteString(0,"rtemperature read error\n");
+#endif
+    }
+
     switch( port )
     {
     case 2:
@@ -224,12 +372,13 @@ static void PrepareTxFrame( uint8_t port )
             uint16_t altitudeGps = 0xFFFF;
             uint8_t batteryLevel = 0;
                         //DHT22_Read();
-            pressure = ( uint16_t )( MPL3115ReadPressure( ) / 10 );             // in hPa / 10
-            temperature = 00;//( DHT22getTemperature() * 100 );       // in °C * 100
-            altitudeBar = ( int16_t )( MPL3115ReadAltitude( ) * 10 );           // in m * 10
-            batteryLevel = BoardGetBatteryLevel( );                             // 1 (very low) to 254 (fully charged)
-            GpsGetLatestGpsPositionBinary( &latitude, &longitude );
-            altitudeGps = GpsGetLatestGpsAltitude( );                           // in m
+            pressure = 0;//( uint16_t )( MPL3115ReadPressure( ) / 10 );             // in hPa / 10
+            temperature = ( uint16_t )(si_temperature*100);;//( DHT22getTemperature() * 100 );       // in °C * 100
+            altitudeBar = 0;//( int16_t )( MPL3115ReadAltitude( ) * 10 );           // in m * 10
+            batteryLevel = 0;//BoardGetBatteryLevel( );                             // 1 (very low) to 254 (fully charged)
+            //GpsGetLatestGpsPositionBinary( &latitude, &longitude );
+            latitude = 0;
+            altitudeGps = 0;//GpsGetLatestGpsAltitude( );                           // in m
 
             AppData[0] = AppLedStateOn;
             AppData[1] = ( pressure >> 8 ) & 0xFF;
@@ -318,39 +467,40 @@ static void PrepareTxFrame( uint8_t port )
  */
 static bool SendFrame( void )
 {
-    McpsReq_t mcpsReq;
+    //McpsReq_t mcpsReq;
     LoRaMacTxInfo_t txInfo;
     
     if( LoRaMacQueryTxPossible( AppDataSize, &txInfo ) != LORAMAC_STATUS_OK )
     {
         // Send empty frame in order to flush MAC commands
-        mcpsReq.Type = MCPS_UNCONFIRMED;
-        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
-        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
-        mcpsReq.Req.Unconfirmed.Datarate = DR_0;
+        mcpsRequest.Type = MCPS_UNCONFIRMED;
+        mcpsRequest.Req.Unconfirmed.fBuffer = NULL;
+        mcpsRequest.Req.Unconfirmed.fBufferSize = 0;
+        mcpsRequest.Req.Unconfirmed.Datarate = DR_0;
     }
     else
     {
         if( IsTxConfirmed == false )
         {
-            mcpsReq.Type = MCPS_UNCONFIRMED;
-            mcpsReq.Req.Unconfirmed.fPort = AppPort;
-            mcpsReq.Req.Unconfirmed.fBuffer = AppData;
-            mcpsReq.Req.Unconfirmed.fBufferSize = AppDataSize;
-            mcpsReq.Req.Unconfirmed.Datarate = DR_0;
+            mcpsRequest.Type = MCPS_UNCONFIRMED;
+            mcpsRequest.Req.Unconfirmed.fPort = AppPort;
+            mcpsRequest.Req.Unconfirmed.fBuffer = AppData;
+            mcpsRequest.Req.Unconfirmed.fBufferSize = AppDataSize;
+            mcpsRequest.Req.Unconfirmed.Datarate = DR_0;
         }
         else
         {
-            mcpsReq.Type = MCPS_CONFIRMED;
-            mcpsReq.Req.Confirmed.fPort = AppPort;
-            mcpsReq.Req.Confirmed.fBuffer = AppData;
-            mcpsReq.Req.Confirmed.fBufferSize = AppDataSize;
-            mcpsReq.Req.Confirmed.NbTrials = 8;
-            mcpsReq.Req.Confirmed.Datarate = DR_0;
+            mcpsRequest.Type = MCPS_CONFIRMED;
+            mcpsRequest.Req.Confirmed.fPort = AppPort;
+            mcpsRequest.Req.Confirmed.fBuffer = AppData;
+            mcpsRequest.Req.Confirmed.fBufferSize = AppDataSize;
+            mcpsRequest.Req.Confirmed.NbTrials = 8;
+            mcpsRequest.Req.Confirmed.Datarate = DR_0;
         }
     }
-        GpioWrite( &Led2, GpioRead( &Led2 ) ^ 1 );
-    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
+        //nrf_gpio_pin_toggle(led2);
+    //define McpsReq_t mcpsRequest as global value to fix the array bug
+    if( LoRaMacMcpsRequest() == LORAMAC_STATUS_OK )
     {
         return false;
     }
@@ -360,12 +510,13 @@ static bool SendFrame( void )
 /*!
  * \brief Function executed on TxNextPacket Timeout event
  */
-static void OnTxNextPacketTimerEvent( void )
+static void OnTxNextPacketTimerEvent( void * p_context )
 {
     MibRequestConfirm_t mibReq;
     LoRaMacStatus_t status;
 
-    TimerStop( &TxNextPacketTimer );
+    app_timer_stop(TxNextPacketTimer);
+
 
     mibReq.Type = MIB_NETWORK_JOINED;
     status = LoRaMacMibGetRequestConfirm( &mibReq );
@@ -384,35 +535,72 @@ static void OnTxNextPacketTimerEvent( void )
     }
 }
 
-/*!
- * \brief Function executed on Led 1 Timeout event
- */
-static void OnLed1TimerEvent( void )
-{
-    TimerStop( &Led1Timer );
-    // Switch LED 1 OFF
-    GpioWrite( &Led1, 1 );
-}
 
-/*!
- * \brief Function executed on Led 2 Timeout event
+/*
+ * Timer initialization.
  */
-static void OnLed2TimerEvent( void )
-{
-    TimerStop( &Led2Timer );
-    // Switch LED 2 OFF
-    GpioWrite( &Led2, 1 );
-}
+static void Timer_init(void)
+{   
+    uint32_t err_code;
 
-/*!
- * \brief Function executed on Led 4 Timeout event
- */
-static void OnLed4TimerEvent( void )
-{
-    TimerStop( &Led4Timer );
-    // Switch LED 4 OFF
-    GpioWrite( &Led4, 1 );
+    lfclk_config();
+
+    // Initialize timer module.
+    APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_MAX_TIMERS, APP_TIMER_OP_QUEUE_SIZE, true);
+
+    // Initialize driver timeout timers
+
+    err_code = app_timer_create(&TxNextPacketTimer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnTxNextPacketTimerEvent);    
+    APP_ERROR_CHECK(err_code);  
+
+    
+    err_code = app_timer_create(&tx_timeout_timer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                SX1276OnTimeoutIrq);    
+    APP_ERROR_CHECK(err_code);    
+
+     err_code = app_timer_create(&rx_timeout_timer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                SX1276OnTimeoutIrq);
+    APP_ERROR_CHECK(err_code); 
+
+    /*err_code = app_timer_create(&rx_timeout_sync_word,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                SX1276OnTimeoutIrq);
+    APP_ERROR_CHECK(err_code);*/
+
+    err_code = app_timer_create(&MacStateCheckTimer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnMacStateCheckTimerEvent);    
+    APP_ERROR_CHECK(err_code); 
+
+    err_code = app_timer_create(&TxDelayedTimer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnTxDelayedTimerEvent);    
+    APP_ERROR_CHECK(err_code);    
+
+    err_code = app_timer_create(&RxWindowTimer1,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnRxWindow1TimerEvent);
+    APP_ERROR_CHECK(err_code); 
+
+    err_code = app_timer_create(&RxWindowTimer2,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnRxWindow2TimerEvent);
+    APP_ERROR_CHECK(err_code); 
+
+    err_code = app_timer_create(&AckTimeoutTimer,
+                                APP_TIMER_MODE_SINGLE_SHOT,
+                                OnAckTimeoutTimerEvent);
+    APP_ERROR_CHECK(err_code); 
+
+    // Initialize scheduler module
+   APP_SCHED_INIT(SCHED_MAX_EVENT_DATA_SIZE, SCHED_QUEUE_SIZE);
 }
+/*********************************************************************************************/
+
 /*!
  * \brief   MCPS-Confirm event function
  *
@@ -448,8 +636,7 @@ static void McpsConfirm( McpsConfirm_t *McpsConfirm )
         }
 
         // Switch LED 1 ON
-        GpioWrite( &Led1, 0 );
-        TimerStart( &Led1Timer );
+        //nrf_gpio_pin_toggle(led1);
     }
     NextTx = true;
 }
@@ -462,6 +649,9 @@ static void McpsConfirm( McpsConfirm_t *McpsConfirm )
  */
 static void McpsIndication( McpsIndication_t *McpsIndication )
 {
+#if DEBUG_info
+    SEGGER_RTT_WriteString(0,"McpsIndication...........\n");
+#endif
     if( McpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
     {
         return;
@@ -513,14 +703,13 @@ static void McpsIndication( McpsIndication_t *McpsIndication )
             if( McpsIndication->BufferSize == 1 )
             {
                 AppLedStateOn = McpsIndication->Buffer[0] & 0x01;
-                GpioWrite( &Led3, ( ( AppLedStateOn & 0x01 ) != 0 ) ? 0 : 1 );
             }
             break;
-                case 10: // Locate: Send GPS Data
-                      TimerStop( &TxNextPacketTimer );
-                      TimerSetValue( &TxNextPacketTimer, 100000 );
+        /*case 10: // Locate: Send GPS Data
+            TimerStop( &TxNextPacketTimer );
+            TimerSetValue( &TxNextPacketTimer, 100000 );
             TimerStart( &TxNextPacketTimer );
-                        break;
+            break;*/
         case 224:
             if( ComplianceTest.Running == false )
             {
@@ -609,8 +798,7 @@ static void McpsIndication( McpsIndication_t *McpsIndication )
     }
 
     // Switch LED 2 ON for each received downlink
-    GpioWrite( &Led2, 0 );
-    TimerStart( &Led2Timer );
+    nrf_gpio_pin_toggle(led2);
 }
 
 /*!
@@ -649,53 +837,41 @@ static void MlmeConfirm( MlmeConfirm_t *MlmeConfirm )
     NextTx = true;
 }
 
-
-#include <stdio.h>
-
- 
-int fputc(int c, FILE *stream)
-{
-   return(ITM_SendChar(c));
-}
-
-int a = 0;
 /**
  * Main application entry point.
  */
 int main( void )
-{  
+{
+    Timer_init();
+
+    nrf_gpio_range_cfg_output(ledstart, ledstop);
+
     LoRaMacPrimitives_t LoRaMacPrimitives;
     LoRaMacCallback_t LoRaMacCallbacks;
     MibRequestConfirm_t mibReq;
 
-    BoardInitMcu( );
-    BoardInitPeriph( );
-        TIM4_Init();
     DeviceState = DEVICE_STATE_INIT;
 
+    nrf_gpio_pin_toggle(led1);
+    
+
     while( 1 )
-    {       printf("hello world a = %d\r\n",a);
-                a++;
+    {
+        nrf_gpio_pin_toggle(led1);
+        app_sched_execute();
         switch( DeviceState )
-        {       
+        {
             case DEVICE_STATE_INIT:
             {
+#if DEBUG_info
+                SEGGER_RTT_WriteString(0,"*****DEVICE_STATE_INIT******\n");
+#endif
                 LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
                 LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
                 LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
-                LoRaMacCallbacks.GetBatteryLevel = BoardGetBatteryLevel;
+                LoRaMacCallbacks.GetBatteryLevel = 0;//BoardGetBatteryLevel;
                 LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks );
 
-                TimerInit( &TxNextPacketTimer, OnTxNextPacketTimerEvent );
-
-                TimerInit( &Led1Timer, OnLed1TimerEvent );
-                TimerSetValue( &Led1Timer, 25000 );
-
-                TimerInit( &Led2Timer, OnLed2TimerEvent );
-                TimerSetValue( &Led2Timer, 25000 );
-
-                TimerInit( &Led4Timer, OnLed4TimerEvent );
-                TimerSetValue( &Led4Timer, 25000 );
 
                 mibReq.Type = MIB_ADR;
                 mibReq.Param.AdrEnable = LORAWAN_ADR_ON;
@@ -723,6 +899,9 @@ int main( void )
             }
             case DEVICE_STATE_JOIN:
             {
+#if DEBUG_info
+                SEGGER_RTT_WriteString(0,"*****DEVICE_STATE_JOIN******\n");
+#endif
 #if( OVER_THE_AIR_ACTIVATION != 0 )
                 MlmeReq_t mlmeReq;
 
@@ -750,7 +929,7 @@ int main( void )
 
                 // Choose a random device address
  //               DevAddr = randr( 0, 0x01FFFFFF );
-                                DevAddr = LORAWAN_DEVICE_ADDRESS;
+                DevAddr = LORAWAN_DEVICE_ADDRESS;
                 mibReq.Type = MIB_NET_ID;
                 mibReq.Param.NetID = LORAWAN_NETWORK_ID;
                 LoRaMacMibSetRequestConfirm( &mibReq );
@@ -777,6 +956,9 @@ int main( void )
             }
             case DEVICE_STATE_SEND:
             {
+#if DEBUG_info
+                SEGGER_RTT_WriteString(0,"*****DEVICE_STATE_SEND******\n");
+#endif
                 if( NextTx == true )
                 {
                     PrepareTxFrame( AppPort );
@@ -793,22 +975,29 @@ int main( void )
                     // Schedule next packet transmission
                     TxDutyCycleTime = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
                 }
+                //define TxDutyCycleTime maully to fit for the schedule
+                TxDutyCycleTime = 8000;
+#if DEBUG_info
+                SEGGER_RTT_printf(0, " TxDutyCycleTime %d \r\n", TxDutyCycleTime);
+#endif
                 DeviceState = DEVICE_STATE_CYCLE;
                 break;
             }
             case DEVICE_STATE_CYCLE:
             {
+#if DEBUG_info
+                SEGGER_RTT_WriteString(0,"*****DEVICE_STATE_CYCLE******\n");
+#endif
                 DeviceState = DEVICE_STATE_SLEEP;
 
                 // Schedule next packet transmission
-                TimerSetValue( &TxNextPacketTimer, TxDutyCycleTime );
-                TimerStart( &TxNextPacketTimer );
+                app_timer_start(TxNextPacketTimer,APP_TIMER_TICKS(TxDutyCycleTime,0),NULL);
                 break;
             }
             case DEVICE_STATE_SLEEP:
             {
                 // Wake up through events
-                TimerLowPowerHandler( );
+                //TimerWakeUpHandler( );
                 break;
             }
             default:
@@ -817,11 +1006,11 @@ int main( void )
                 break;
             }
         }
-        if( GpsGetPpsDetectedState( ) == true )
+        /*if( GpsGetPpsDetectedState( ) == true )
         {
             // Switch LED 4 ON
             GpioWrite( &Led4, 0 );
             TimerStart( &Led4Timer );
-        }
+        }*/
     }
 }
-- 
2.6.4 (Apple Git-63)

